{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","title","TodoList","todos","map","id","completed","username","userId","App","useState","todosFromServer","usersFromServer","find","setTodos","selectUserId","setSelectUserId","newTodoTitle","setNewTodoTitle","isValidTitle","setIsValidTitle","isValidSelect","setIsValidSelect","action","method","onSubmit","event","preventDefault","newTodo","Math","max","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89e1aed1.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../Types/Types';\n\nexport const UserInfo: FC<{ user: User | null }> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import { FC } from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { TodoListType } from '../../Types/Types';\n\nexport const TodoInfo: FC<{ todo: TodoListType }> = ({ todo }) => (\n  <>\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    <UserInfo user={todo.user} />\n  </>\n);\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoListType } from '../../Types/Types';\n\nexport const TodoList: FC<{ todos: TodoListType[] }> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <article\n        data-id={todo.id}\n        key={todo.id}\n        className={`TodoInfo${!todo.completed ? '' : ' TodoInfo--completed'}`}\n      >\n        <TodoInfo todo={todo} />\n      </article>\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC, useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoListType } from './Types/Types';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst todosWithUser = (): TodoListType[] => {\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(({ id }) => id === todo.userId) || null,\n  }));\n};\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<TodoListType[]>(todosWithUser());\n  const [selectUserId, setSelectUserId] = useState<number>(0);\n  const [newTodoTitle, setNewTodoTitle] = useState<string>('');\n  const [isValidTitle, setIsValidTitle] = useState<boolean>(false);\n  const [isValidSelect, setIsValidSelect] = useState<boolean>(false);\n\n  function checkValidInput() {\n    if (selectUserId === 0 || newTodoTitle === '') {\n      setIsValidSelect(selectUserId === 0);\n      setIsValidTitle(newTodoTitle === '');\n\n      return true;\n    }\n\n    return false;\n  }\n\n  const resetForm = () => {\n    setSelectUserId(0);\n    setNewTodoTitle('');\n    setIsValidTitle(false);\n    setIsValidSelect(false);\n  };\n\n  const addTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (checkValidInput()) {\n      return;\n    }\n\n    const newTodo: TodoListType = {\n      id: Math.max(...todos.map(({ id }) => id)) + 1,\n      title: newTodoTitle,\n      completed: false,\n      userId: selectUserId,\n      user: usersFromServer.find(({ id }) => id === selectUserId) || null,\n    };\n\n    setTodos([...todos, newTodo]);\n    resetForm();\n  };\n\n  const handleOnChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(event.target.value);\n    setIsValidTitle(false);\n  };\n\n  const handleOnChangeSelect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setSelectUserId(+event.target.value);\n    setIsValidSelect(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addTodo}\n      >\n        <label className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            placeholder=\"enter a title\"\n            data-cy=\"titleInput\"\n            value={newTodoTitle}\n            onChange={handleOnChangeInput}\n          />\n          {isValidTitle\n          && <span className=\"error\">Please enter a title</span>}\n        </label>\n\n        <div className=\"field\">\n          {'Choose a user: '}\n          <select\n            data-cy=\"userSelect\"\n            value={selectUserId}\n            onChange={handleOnChangeSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(({ id, name }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n          {isValidSelect\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}