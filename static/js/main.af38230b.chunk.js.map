{"version":3,"sources":["components/TodoInfo/TodoInfo.tsx","components/UserInfo/UserInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["TodoInfo","title","className","UserInfo","name","email","href","TodoList","todos","map","user","id","completed","classNames","username","userId","findUser","usersFromServer","find","App","visibleTodo","todo","cloneTodo","getTodos","todosFromServer","useState","setTodos","selectUserId","setSelectUserId","newTodoTitle","setNewTodoTitle","todoForList","setTodoForList","validTitle","setValidTitle","validSelect","setValidSelect","action","method","onSubmit","event","preventDefault","replace","newTodo","Math","max","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af38230b.chunk.js","sourcesContent":["import { FC } from 'react';\n\nexport const TodoInfo: FC<{ title: string }> = ({ title }) => (\n  <h2 className=\"TodoInfo__title\">\n    {title}\n  </h2>\n);\n","import { FC } from 'react';\nimport { User } from '../../Types/Types';\n\nexport const UserInfo: FC<Pick<User, 'name' | 'email'>> = ({ name, email }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { TodoInfo } from '../TodoInfo';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../Types/Types';\n\nexport const TodoList: FC<{ todos: Todo[] }> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(({\n      title, user, id, completed,\n    }) => (\n      <article\n        data-id={id}\n        key={id}\n        className={classNames(\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )}\n      >\n        <TodoInfo title={title} />\n\n        <UserInfo name={user?.name || ''} email={user?.email || ''} />\n      </article>\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC, useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Todo } from './Types/Types';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction findUser(userId: number) {\n  return usersFromServer.find(({ id }) => id === userId);\n}\n\nfunction getTodos(todos: Todo[]) {\n  return todos.map(todo => {\n    const cloneTodo = { ...todo };\n\n    cloneTodo.user = findUser(cloneTodo.userId);\n\n    return cloneTodo;\n  });\n}\n\nexport const App: FC = () => {\n  const visibleTodo = getTodos(todosFromServer);\n\n  const [todos, setTodos] = useState(visibleTodo);\n\n  const [selectUserId, setSelectUserId] = useState(0);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [todoForList, setTodoForList] = useState('');\n\n  const [validTitle, setValidTitle] = useState(false);\n  const [validSelect, setValidSelect] = useState(false);\n\n  function checkValidInput() {\n    setTodoForList(newTodoTitle.replace(/[^A-Za-z\\s\\d\\u0400-\\u04FF]/g, ''));\n\n    if (selectUserId === 0 || todoForList === '') {\n      setValidSelect(selectUserId === 0);\n      setValidTitle(newTodoTitle === '');\n\n      return true;\n    }\n\n    return false;\n  }\n\n  const resetForm = () => {\n    setSelectUserId(0);\n    setNewTodoTitle('');\n    setValidTitle(false);\n    setValidSelect(false);\n  };\n\n  const addTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (checkValidInput()) {\n      return;\n    }\n\n    const newTodo = {\n      id: Math.max(...todos.map(({ id }) => id)) + 1,\n      title: todoForList,\n      completed: false,\n      userId: selectUserId,\n      user: findUser(selectUserId),\n    };\n\n    setTodos([...todos, newTodo]);\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addTodo}\n      >\n        <label className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            placeholder=\"enter a title\"\n            data-cy=\"titleInput\"\n            value={newTodoTitle}\n            onChange={({ target }) => {\n              setNewTodoTitle(target.value);\n              setValidTitle(false);\n            }}\n          />\n          {validTitle\n          && <span className=\"error\">Please enter a title</span>}\n        </label>\n\n        <div className=\"field\">\n          {'Choose a user: '}\n          <select\n            data-cy=\"userSelect\"\n            value={selectUserId}\n            onChange={({ target }) => {\n              setSelectUserId(+target.value);\n              setValidSelect(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(({ id, name }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n          {validSelect\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}