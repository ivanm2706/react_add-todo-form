{"version":3,"sources":["components/TodoInfo/TodoInfo.tsx","components/UserInfo/UserInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["TodoInfo","title","className","UserInfo","user","href","email","name","TodoList","todos","users","map","id","completed","userId","classNames","find","username","App","useState","todosFromServer","setTodos","selectUserId","setSelectUserId","newTodoTitle","setNewTodoTitle","todoForList","setTodoForList","isValidTitle","setIsValidTitle","isValidSelect","setIsValidSelect","action","method","onSubmit","event","preventDefault","replace","newTodo","Math","max","type","placeholder","value","onChange","target","disabled","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"6NAEaA,EAAkC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC7C,oBAAIC,UAAU,kBAAd,SACGD,KCDQE,EAAsC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjD,mBAAGF,UAAU,WAAWG,KAAI,wBAAYD,QAAZ,IAAYA,OAAZ,EAAYA,EAAME,OAA9C,gBACGF,QADH,IACGA,OADH,EACGA,EAAMG,QCCEC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACxC,yBAASR,UAAU,WAAnB,SACGO,EAAME,KAAI,gBACTV,EADS,EACTA,MACAW,EAFS,EAETA,GACAC,EAHS,EAGTA,UACAC,EAJS,EAITA,OAJS,OAMT,0BACE,UAASF,EAETV,UAAWa,IACT,WACA,CAAE,sBAAuBF,IAL7B,UAQE,cAAC,EAAD,CAAUZ,MAAOA,IAEjB,cAAC,EAAD,CAAUG,KAAMM,EAAMM,MAAK,SAAAZ,GAAI,OAAIA,EAAKQ,KAAOE,MAAW,SARrDF,SChBE,G,MAAA,CACb,CACEA,GAAI,EACJL,KAAM,gBACNU,SAAU,OACVX,MAAO,qBAET,CACEM,GAAI,EACJL,KAAM,eACNU,SAAU,YACVX,MAAO,qBAET,CACEM,GAAI,EACJL,KAAM,mBACNU,SAAU,WACVX,MAAO,sBAET,CACEM,GAAI,EACJL,KAAM,mBACNU,SAAU,WACVX,MAAO,6BAET,CACEM,GAAI,EACJL,KAAM,mBACNU,SAAU,SACVX,MAAO,4BAET,CACEM,GAAI,EACJL,KAAM,uBACNU,SAAU,mBACVX,MAAO,2BAET,CACEM,GAAI,EACJL,KAAM,kBACNU,SAAU,eACVX,MAAO,0BAET,CACEM,GAAI,EACJL,KAAM,2BACNU,SAAU,gBACVX,MAAO,wBAET,CACEM,GAAI,EACJL,KAAM,kBACNU,SAAU,WACVX,MAAO,2BAET,CACEM,GAAI,GACJL,KAAM,qBACNU,SAAU,iBACVX,MAAO,4BC3DI,GACb,CACEM,GAAI,EACJX,MAAO,qBACPY,WAAW,EACXC,OAAQ,GAEV,CACEF,GAAI,GACJX,MAAO,kBACPY,WAAW,EACXC,OAAQ,GAEV,CACEF,GAAI,EACJX,MAAO,qCACPY,WAAW,EACXC,OAAQ,ICTCI,EAAU,WACrB,MAA0BC,mBAASC,GAAnC,mBAAOX,EAAP,KAAcY,EAAd,KAEA,EAAwCF,mBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAEA,EAAwCR,oBAAS,GAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAA0CV,oBAAS,GAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KAoDA,OACE,sBAAK7B,UAAU,MAAf,UACE,+CAEA,uBACE8B,OAAO,aACPC,OAAO,OACPC,SArCU,SAACC,GAGf,GAFAA,EAAMC,iBApBNT,EAAeH,EAAaa,QAAQ,8BAA+B,KAE9C,IAAjBf,GAAsC,KAAhBI,IACxBK,EAAkC,IAAjBT,GACjBO,EAAiC,KAAjBL,GAET,GAgBT,CAIA,IAAMc,EAAU,CACd1B,GAAI2B,KAAKC,IAAL,MAAAD,KAAI,YAAQ9B,EAAME,KAAI,qBAAGC,QAAgB,EAC7CX,MAAOyB,EACPb,WAAW,EACXC,OAAQQ,GAGVD,EAAS,GAAD,mBAAKZ,GAAL,CAAY6B,KApBpBf,EAAgB,GAChBE,EAAgB,IAChBI,GAAgB,GAChBE,GAAiB,KAqCf,UAKE,wBAAO7B,UAAU,QAAjB,UACG,UACD,uBACEuC,KAAK,OACLC,YAAY,gBACZ,UAAQ,aACRC,MAAOnB,EACPoB,SA5BkB,SAACT,GAC3BV,EAAgBU,EAAMU,OAAOF,OAC7Bd,GAAgB,MA4BTD,GACE,sBAAM1B,UAAU,QAAhB,qCAGL,sBAAKA,UAAU,QAAf,UACG,kBACD,yBACE,UAAQ,aACRyC,MAAOrB,EACPsB,SAlCmB,SAC3BT,GAEAZ,GAAiBY,EAAMU,OAAOF,OAC9BZ,GAAiB,IA2BX,UAKE,wBAAQY,MAAM,IAAIG,UAAQ,EAA1B,2BACCC,EAAgBpC,KAAI,gBAAGC,EAAH,EAAGA,GAAIL,EAAP,EAAOA,KAAP,OACnB,wBAAQoC,MAAO/B,EAAf,SAA6BL,GAALK,SAG3BkB,GACE,sBAAM5B,UAAU,QAAhB,qCAGL,wBAAQuC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAUhC,MAAOA,EAAOC,MAAOqC,QC5GrCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4902392a.chunk.js","sourcesContent":["import { FC } from 'react';\n\nexport const TodoInfo: FC<{ title: string }> = ({ title }) => (\n  <h2 className=\"TodoInfo__title\">\n    {title}\n  </h2>\n);\n","import { FC } from 'react';\nimport { User } from '../../Types/Types';\n\nexport const UserInfo: FC<{ user: User | null }> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { TodoInfo } from '../TodoInfo';\nimport { UserInfo } from '../UserInfo';\nimport { TodoListType } from '../../Types/Types';\n\nexport const TodoList: FC<TodoListType> = ({ todos, users }) => (\n  <section className=\"TodoList\">\n    {todos.map(({\n      title,\n      id,\n      completed,\n      userId,\n    }) => (\n      <article\n        data-id={id}\n        key={id}\n        className={classNames(\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )}\n      >\n        <TodoInfo title={title} />\n\n        <UserInfo user={users.find(user => user.id === userId) || null} />\n      </article>\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC, useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const [selectUserId, setSelectUserId] = useState(0);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [todoForList, setTodoForList] = useState('');\n\n  const [isValidTitle, setIsValidTitle] = useState(false);\n  const [isValidSelect, setIsValidSelect] = useState(false);\n\n  function checkValidInput() {\n    setTodoForList(newTodoTitle.replace(/[^A-Za-z\\s\\d\\u0400-\\u04FF]/g, ''));\n\n    if (selectUserId === 0 || todoForList === '') {\n      setIsValidSelect(selectUserId === 0);\n      setIsValidTitle(newTodoTitle === '');\n\n      return true;\n    }\n\n    return false;\n  }\n\n  const resetForm = () => {\n    setSelectUserId(0);\n    setNewTodoTitle('');\n    setIsValidTitle(false);\n    setIsValidSelect(false);\n  };\n\n  const addTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (checkValidInput()) {\n      return;\n    }\n\n    const newTodo = {\n      id: Math.max(...todos.map(({ id }) => id)) + 1,\n      title: todoForList,\n      completed: false,\n      userId: selectUserId,\n    };\n\n    setTodos([...todos, newTodo]);\n    resetForm();\n  };\n\n  const handleOnChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(event.target.value);\n    setIsValidTitle(false);\n  };\n\n  const handleOnChangeSelect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setSelectUserId(+event.target.value);\n    setIsValidSelect(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addTodo}\n      >\n        <label className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            placeholder=\"enter a title\"\n            data-cy=\"titleInput\"\n            value={newTodoTitle}\n            onChange={handleOnChangeInput}\n          />\n          {isValidTitle\n          && <span className=\"error\">Please enter a title</span>}\n        </label>\n\n        <div className=\"field\">\n          {'Choose a user: '}\n          <select\n            data-cy=\"userSelect\"\n            value={selectUserId}\n            onChange={handleOnChangeSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(({ id, name }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n          {isValidSelect\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} users={usersFromServer} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}